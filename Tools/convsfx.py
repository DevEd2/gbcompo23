import sys, os, argparse, struct
from datetime import datetime

parser = argparse.ArgumentParser(description = 'Convert VGM files to DevSFX SFX data')
parser.add_argument('infile', metavar = '[input]', type = argparse.FileType('rb'), help = 'Input file name')
argv = parser.parse_args()
infile=argv.infile

if __name__ == "__main__":
    # open files
    inname = os.path.splitext(infile.name)[0]
    outfile = open(inname + ".txt",'w')
    
    # write header
    now=datetime.now()
    outfile.write("; This file was generated by convsfx.py on " + now.strftime("%d/%m/%Y %H:%M:%S") + "\n\n")
    
    # get data offset
    infile.seek(0x34)
    infile.seek((struct.unpack('<L',infile.read(4))[0])-4,1)
    
    # repeat until EOF
    tickcount = 0
    sfx = 0
    bits = [0,0,0,0,0,0,0,0]
    ch3wave = 0
    ch3vol = 0
    ch3freqlo = 0
    ch3freqhi = 0
    ch3freqhiprev = -1
    ch4env = 0
    ch4envprev = -1
    ch4freq = 0
    ch4reset = 0
    setdelay = 0
    bit6pos = 0
    temppos = 0
    while True:
        
        temppos = infile.tell()
        a = infile.read(3)
        if a == b'\x67\x66\xfe': # found pattern change hint
            print(hex(temppos) + " - pattern change hint")
            infile.seek((struct.unpack('<L',infile.read(4))[0]),1)
            outfile.write("\nsfx" + str(sfx) + ":")
            sfx += 1
            ch3freqhiprev = -1
            ch4envprev = -1
        else:
            infile.seek(temppos)
        cmd = ord(infile.read(1))
        dowrite = 0
        if cmd == 0xB3:
            if tickcount != 0:
                print(tickcount)
                if tickcount > 1:
                    bits[6] = 1
                    outfile.write("\n    db " + str(tickcount) + " ; please set bit 6 of flags to 1, apparently i can't do that automatically")
                dowrite = 1
            
            tickcount = 0
            print(str(hex(infile.tell()-1)) + " - write to register")
            reg = ord(infile.read(1))
            if reg > 0xA and reg < 0x13:
                data = ord(infile.read(1))
                print("    writing " + str(hex(data)) + " to sound register " + str(hex(reg + 0x10)))
                if reg == 0xA: # NR30
                    if data == 0x80:
                        bits[0] = 1
                        print("    we're about to write to wave RAM!")
                        ch3wave = 1
                    elif data == 0x00:
                        print("    we're done writing to wave RAM!")
                elif reg == 0xB: # NR31 (unused)
                    pass
                elif reg == 0xC: # NR32
                    print("    ch3 volume!")
                    bits[0] = 1
                    if data == 0x00:
                        ch3vol = 0
                    elif data == 0x60:
                        ch3vol = 1
                    elif data == 0x40:
                        ch3vol = 2
                    elif data == 0x20:
                        ch3vol = 3
                elif reg == 0xD: # NR33
                    print("    ch3 frequency low!")
                    bits[1] = 1
                    ch3freqlo = data
                elif reg == 0xE: # NR34
                    print("    ch3 freq hi!")
                    ch3freqhi = data & 0x7
                    if ch3freqhiprev != ch3freqhi:
                        bits[2] = 1
                        ch3freqhiprev = ch3freqhi
                elif reg == 0xF: # NR40 (invalid)
                    print("    ERROR: Writing to invalid register NR40!")
                    exit(1)
                elif reg == 0x10: # NR41 (unused)
                    pass
                elif reg == 0x11: # NR42
                    print("    ch4 volume envelope!")
                    ch4env = data
                    if ch4envprev != ch4env:
                        bits[3] = 1
                        bits[5] = 1 # force reset
                        ch4envprev = ch4env
                elif reg == 0x12: # NR43
                    print("    ch4 frequency!")
                    bits[4] = 1
                    ch4freq = data
                elif reg == 0x13: # NR44
                    print("    ch4 reset!")
                    bits[5] = 1
                else:
                    print("    ERROR: Attempting to write to register outside acceptable range!")
                    exit(1)
            else:
                print("    write is outside acceptable range, skipping...")
                infile.seek(1,1)
        elif cmd == 0x62:
            print(str(hex(infile.tell()-1)) + " - wait 1 tick")
            if tickcount == 0:
                outfile.write("\n    db %")
                outfile.write(str(bits[7]))
                bit6pos = outfile.tell()
                outfile.write(str(bits[6]))
                outfile.write(str(bits[5]))
                outfile.write(str(bits[4]))
                outfile.write(str(bits[3]))
                outfile.write(str(bits[2]))
                outfile.write(str(bits[1]))
                outfile.write(str(bits[0]))
                if bits[0] == 1:
                    outfile.write("\n    db " + str(ch3vol << 6) + " | 1 ; ch3 vol " + str(hex(ch3vol)) + " + ch3 wave")
                if bits[1] == 1:
                    outfile.write("\n    db " + str(ch3freqlo) + " ; ch3 freq low " + str(hex(ch3freqlo)))
                if bits[2] == 1:
                    outfile.write("\n    db " + str(ch3freqhi) + " ; ch3 freq high " + str(hex(ch3freqhi)))
                if bits[3] == 1:
                    outfile.write("\n    db " + str(ch4env) + " ; ch4 envelope " + str(hex(ch4env)))
                if bits[4] == 1:
                    outfile.write("\n    db " + str(ch4freq) + " ; ch4 freq " + str(hex(ch4freq)))
            bits = [0,0,0,0,0,0,0,0]
            ch3wave = 0
            ch3vol = 0
            ch3freqlo = 0
            ch3freqhi = 0
            ch4env = 0
            ch4freq = 0
            ch4reset = 0
            setdelay = 0
            bit6pos = 0
            temppos = 0
            tickcount = tickcount + 1
            
        elif cmd == 0x66:
            tickcount = 0
            print(str(hex(infile.tell()-1)) + " - end of file")
            outfile.write("\n")
            break
        else:
            print("ERROR: Unknown command " + str(hex(cmd)) + " at " + str(hex(infile.tell()-1)))
            infile.close()
            outfile.close()
            exit(1)
        # write bits
        
    
    outfile.close()
    infile.close()

soundregs = ["NR10","NR11","NR12","NR13","NR14","NR20 (invalid)","NR21","NR22","NR23","NR24","NR30","NR31","NR32","NR33","NR34","NR40 (invalid)","NR41","NR42","NR43","NR44","NR50","NR51","NR52"]
